---

import lambeauOutside from 'assets/outsideLambeau.jpeg';
import { changeLanguage } from "i18next";
import { getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import JoinAChapter from '@components/joinAChapter.astro';

changeLanguage("en");

// Generate a new path for every collection entry
export async function getStaticPaths() {
    const chapterEntries = await getCollection("chapters");
    return chapterEntries.map((entry) => ({
      params: { slug: entry.slug },
      props: { entry },
    }));
}
// Get the entry directly from the prop on render
const { entry } = Astro.props;
const { Content } = await entry.render();

console.log(entry);
---

<!-- <style>
  .lambeau-outside-bg {
    background-image: lambeauOutside.src;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }
</style> -->

<!-- ACTIVE CHAPTER CODE -->
{entry.data.activeChapter === true && (
  <Layout title={entry.data.city}>
    <Container>
      <div class="flex flex-row mt-6 h-[36rem]">
        <div class="h-[24rem] min-h-full mx-auto max-w-3xl mt-14 p-20 relative" style={`background-image: url(${lambeauOutside.src});`}>
          <div class="absolute inset-0 bg-black opacity-50"></div>
          <div class="relative">
            <span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
              {entry.data.category}
            </span>
            <h1 class="text-white text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight">
              {entry.data.city}
            </h1>
          </div>
        </div>

        <div class="w-1/2 p-6">
          <JoinAChapter>{entry.data.city}?</JoinAChapter>
          {entry.data.organizer}
        </div>
      </div>
      
      <div class="mx-auto prose prose-lg mt-6">
        Hello world
      </div>

        <div class="flex gap-2 mt-3 items-center flex-wrap md:flex-nowrap">
          <span class="text-gray-400">
            {entry.data.organizer}
          </span>
          <span class="text-gray-400">•</span>
          <time
            class="text-gray-400"
            datetime={entry.data.foundedDate}>
            Founded: {entry.data.foundedDate}
          </time>
          <span class="text-gray-400 hidden md:block">•</span>
          <div class="w-full md:w-auto flex flex-wrap gap-3">
            {
              entry.data.tags.map((tag) => (
                <span class="text-sm text-gray-500">#{tag}</span>
              ))
            }
          </div>
        </div>
      </div>

      <div class="mx-auto prose prose-lg mt-6 max-w-3xl">
        <Content />
      </div>
      <div class="text-center mt-8">
        <a
          href="/chapters"
          class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
          >← Back to Chapters</a
        >
      </div>
    </Container>
  </Layout>
)}

<!-- NON-ACTIVE CHAPTER or COMING SOON CHAPTER -->
{((entry.data.activeChapter === false && entry.data.comingSoon === true) ||
  (entry.data.activeChapter === false && entry.data.comingSoon === false)) && (
  <Layout title={entry.data.city}>
    <Container>
      <div class="mx-auto max-w-3xl mt-14">
        <span class="text-blue-400 uppercase tracking-wider text-sm font-medium">
          {entry.data.category}
        </span>
        <h1
          class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight">
          {entry.data.city}
        </h1>
      </div>

      <div class="mx-auto prose prose-lg mt-6 max-w-3xl">
        {(entry.data.comingSoon === false && entry.data.activeChapter === false)? 'Chapter Not Active' : ''}
        {(entry.data.comingSoon === true && entry.data.activeChapter === false) ? 'Chapter Coming Soon' : ''}
      </div>
      <div class="text-center mt-8">
        <a
          href="/chapters"
          class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition"
          >← Back to Chapters</a
        >
      </div>
    </Container>
  </Layout>
)}
