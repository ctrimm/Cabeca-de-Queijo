---
import { t } from "i18next";
import { getNextGames } from '@utils/getNextGames';

const { nextGames } = await getNextGames();

// The function below wasn't working properly, quickly just removed it in favor of displaying dates.
// The original HTML was below - 
// <h2 class="card-title text-center">{index === 0 ? calculateTimeUntilMatch(game.dateOfMatch) : convertToReadableDate(game.dateOfMatch)}</h2>

function calculateTimeUntilMatch(dateOfMatch: string): string {
  const today = new Date();
  const matchDate = new Date(dateOfMatch);
  const timeDifference = matchDate.getTime() - today.getTime();
  const hoursUntilMatch = timeDifference / (1000 * 60 * 60);
  const daysUntilMatch = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

  // If today === match date and the match time is in the future, return "Today"
  // Else if the match is in the past by 4 hours, return "In Progress"
  // Else if the match is in the past between 4 and 24 hours, return "Ended Today"
  // Else return "In X days"
  if (today.getFullYear() === matchDate.getFullYear() && today.getMonth() === matchDate.getMonth() && today.getDate() === matchDate.getDate() && hoursUntilMatch > 0) {
    return t("nextGames.today");
  // } else if (hoursUntilMatch < 0 && hoursUntilMatch > -4) {
  //   return t("nextGames.inProgress");
  // } else if (hoursUntilMatch <-4 && hoursUntilMatch > -24 ) {
  //   return t("nextGames.endedToday");
  } else {
    return `${t("nextGames.in")} ${daysUntilMatch} ${t("nextGames.day")}${daysUntilMatch > 1 ? 's' : ''}`;
  }
}

function convertToReadableDate(dateString: string): string {
  try {
    const date = new Date(dateString);
    const options: Intl.DateTimeFormatOptions = { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric', 
      timeZone: 'America/Sao_Paulo' 
    };
    const localeString = t("nextGames.localeString") as string;
    return date.toLocaleDateString(localeString === 'pt-BR' ? 'pt-BR' : 'en-US', options);
  } catch (error) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      timeZone: 'America/Sao_Paulo'
    });
  }
}

function extractTime(dateString: string): string {
  try {
    const date = new Date(dateString);
    const options: Intl.DateTimeFormatOptions = {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
      timeZone: 'America/Sao_Paulo'
    };
    const localeString = t("nextGames.localeString") as string;
    return date.toLocaleTimeString(localeString === 'pt-BR' ? 'pt-BR' : 'en-US', options);
  } catch (error) {
    const date = new Date(dateString);
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
      timeZone: 'America/Sao_Paulo'
    });
  }
}
---

<div class="mt-4 md:mt-0 py-4 pb-[4rem]" id="schedule">
  <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight">
    {t("nextGames.title")}
  </h2>
  <div class="grid md:grid-cols-4 gap-4 max-h-100 text-lg mt-4 text-slate-600">
    {
      nextGames.map((game, index) => (
        <div class="card w-50 bg-neutral text-neutral-content drop-shadow-lg">
          <div class="card-body">
            <h2 class="card-title text-center">{convertToReadableDate(game.dateOfMatch)}</h2>
            <p class="pt-5 pb-0"><strong>{t("nextGames.time")}:</strong>{` ${extractTime(game.dateOfMatch)}`} Brasilia Time</p>
            <p class="pb-5"><strong>{game.opponent ? t("nextGames.opponent"): t("nextGames.event")}:</strong>{game.opponent ? ` ${game.opponent}`: ` ${game.eventName}`}</p>
          </div>
        </div>
      ))
    }
  </div>
</div>
