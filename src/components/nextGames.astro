---
import { t } from "i18next";

// TO-DO - Work in Progress to add TV networks + outcome + logic to not display games in the past
const schedule = [
  {
    dateOfMatch: "2023-09-10T13:00:00.000-03:00",
    opponent: "at Chicago Bears",
    outcome: "W",
    score: "38-20"
  },
  {
    dateOfMatch: "2023-09-17T14:00:00.000-03:00",
    opponent: "at Atlanta Falcons",
    outcome: "L",
    score: "24-25"
  },
  {
    dateOfMatch: "2023-09-24T14:00:00.000-03:00",
    opponent: "New Orleans Saints",
    outcome: "W",
    score: "17-18"
  },
  {
    dateOfMatch: "2023-09-28T21:15:00.000-03:00",
    opponent: "Detroit Lions",
    outcome: "L",
    score: "34-20"
  },
  {
    dateOfMatch: "2023-10-09T21:15:00.000-03:00",
    opponent: "at Oakland Raiders",
    outcome: "L",
    score: "13-17"
  },
  {
    dateOfMatch: "2023-10-22T17:25:00.000-03:00",
    opponent: "at Denver Broncos",
    outcome: "L",
    score: "17-19"
  },
  {
    dateOfMatch: "2023-10-29T14:00:00.000-03:00",
    opponent: "Minnesota Vikings",
    outcome: "L",
    score: "24-10"
  },
  {
    dateOfMatch: "2023-11-05T15:00:00.000-03:00",
    opponent: "Los Angeles Rams",
    outcome: "W",
    score: "3-20"
  },
  {
    dateOfMatch: "2023-11-12T15:00:00.000-03:00",
    opponent: "at Pittsburgh Steelers",
    outcome: "L",
    score: "19-23"
  },
  {
    dateOfMatch: "2023-11-19T15:00:00.000-03:00",
    opponent: "Los Angeles Chargers",
    outcome: "W",
    score: "20-23"
  },
  {
    dateOfMatch: "2023-11-23T14:30:00.000-03:00",
    opponent: "at Detroit Lions",
    outcome: "W",
    score: "29-22"
  },
  {
    dateOfMatch: "2023-12-03T22:20:00.000-03:00",
    opponent: "Kansas City Chiefs",
    outcome: "W",
    score: "19-27"
  },
  {
    dateOfMatch: "2023-12-11T22:15:00.000-03:00",
    opponent: "at New York Giants",
    outcome: "L",
    score: "22-24"
  },
  {
    dateOfMatch: "2023-12-17T15:00:00.000-03:00",
    opponent: "Tampa Bay Buccaneers",
    outcome: "L",
    score: "34-20"
  },
  {
    dateOfMatch: "2023-12-24T15:00:00.000-03:00",
    opponent: "at Carolina Panthers",
    outcome: "W",
    score: "33-30"
  },
  {
    dateOfMatch: "2023-12-31T22:20:00.000-03:00",
    opponent: "at Minnesota Vikings",
    outcome: "W",
    score: "33-10"
  },
  {
    dateOfMatch: "2024-01-07T18:25:00.000-03:00",
    opponent: "Chicago Bears",
  },
];

// The function below wasn't working properly, quickly just removed it in favor of displaying dates.
// The original HTML was below - 
// <h2 class="card-title text-center">{index === 0 ? calculateTimeUntilMatch(game.dateOfMatch) : convertToReadableDate(game.dateOfMatch)}</h2>

function calculateTimeUntilMatch(dateOfMatch) {
  const today = new Date();
  const matchDate = new Date(dateOfMatch);
  const timeDifference = matchDate.getTime() - today.getTime();
  const hoursUntilMatch = timeDifference / (1000 * 60 * 60);
  const daysUntilMatch = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

  // If today === match date and the match time is in the future, return "Today"
  // Else if the match is in the past by 4 hours, return "In Progress"
  // Else if the match is in the past between 4 and 24 hours, return "Ended Today"
  // Else return "In X days"
  if (today.getFullYear() === matchDate.getFullYear() && today.getMonth() === matchDate.getMonth() && today.getDate() === matchDate.getDate() && hoursUntilMatch > 0) {
    return t("nextGames.today");
  // } else if (hoursUntilMatch < 0 && hoursUntilMatch > -4) {
  //   return t("nextGames.inProgress");
  // } else if (hoursUntilMatch <-4 && hoursUntilMatch > -24 ) {
  //   return t("nextGames.endedToday");
  } else {
    return `${t("nextGames.in")} ${daysUntilMatch} ${t("nextGames.day")}${daysUntilMatch > 1 ? 's' : ''}`;
  }
}

function convertToReadableDate(dateString) {
  const date = new Date(dateString);
  const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', timeZone: 'America/Sao_Paulo' };
  const localeString = t("nextGames.localeString");
  return date.toLocaleDateString(localeString, options);
}

function extractTime(dateString) {
  const date = new Date(dateString);
  const options = { hour: 'numeric', minute: '2-digit', hour12: true, timeZone: 'America/Sao_Paulo' };
  const localeString = t("nextGames.localeString");
  return date.toLocaleTimeString(localeString, options);
}
---

<div class="mt-4 md:mt-0 py-4 pb-[4rem]" id="schedule">
  <h2 class="text-4xl lg:text-5xl font-bold lg:tracking-tight">
    {t("nextGames.title")}
  </h2>
  <div class="grid md:grid-cols-4 gap-4 max-h-100 text-lg mt-4 text-slate-600">
    {
      schedule
      .filter((game) => {
        const today = new Date();
        const gameDate = new Date(game.dateOfMatch);

        return (
          gameDate.getFullYear() > today.getFullYear() ||
          (gameDate.getFullYear() === today.getFullYear() && gameDate.getMonth() > today.getMonth()) ||
          (gameDate.getFullYear() === today.getFullYear() && gameDate.getMonth() === today.getMonth() && gameDate.getDate() >= today.getDate())
        );
      })
      .sort((a, b) => new Date(a.dateOfMatch).getTime() - new Date(b.dateOfMatch).getTime())
      .slice(0, 4)
      .map((game, index) => (
        <div class="card w-50 bg-neutral text-neutral-content drop-shadow-lg">
          <div class="card-body">
            <h2 class="card-title text-center">{convertToReadableDate(game.dateOfMatch)}</h2>
            <p class="pt-5 pb-0"><strong>{t("nextGames.time")}:</strong>{` ${extractTime(game.dateOfMatch)}`} Brasilia Time</p>
            <p class="pb-5"><strong>{t("nextGames.opponent")}:</strong>{` ${game.opponent}`}</p>
          </div>
        </div>
      ))
    }
  </div>
</div>
